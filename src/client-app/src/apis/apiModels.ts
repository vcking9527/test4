//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * Query
     * @param pageNumber (optional) 目前頁面，預設為1
     * @param pageSize (optional) 一個頁面有幾筆，預設為10筆，最大1000筆
     * @return Success
     */
    account(pageNumber: number | undefined, pageSize: number | undefined , cancelToken?: CancelToken | undefined): Promise<AccountDtoPaginationListApiResponse> {
        let url_ = this.baseUrl + "/api/account?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAccount(_response);
        });
    }

    protected processAccount(response: AxiosResponse): Promise<AccountDtoPaginationListApiResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AccountDtoPaginationListApiResponse.fromJS(resultData200);
            return Promise.resolve<AccountDtoPaginationListApiResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AccountDtoPaginationListApiResponse>(null as any);
    }

    /**
     * @return Success
     */
    all(  cancelToken?: CancelToken | undefined): Promise<Account[]> {
        let url_ = this.baseUrl + "/api/account/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAll(_response);
        });
    }

    protected processAll(response: AxiosResponse): Promise<Account[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Account.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<Account[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Account[]>(null as any);
    }
}

export class Account implements IAccount {
    accountNumber?: number;
    balance?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    age?: number;
    gender?: string | undefined;
    address?: string | undefined;
    employer?: string | undefined;
    email?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;

    constructor(data?: IAccount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountNumber = _data["accountNumber"];
            this.balance = _data["balance"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.age = _data["age"];
            this.gender = _data["gender"];
            this.address = _data["address"];
            this.employer = _data["employer"];
            this.email = _data["email"];
            this.city = _data["city"];
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): Account {
        data = typeof data === 'object' ? data : {};
        let result = new Account();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountNumber"] = this.accountNumber;
        data["balance"] = this.balance;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["age"] = this.age;
        data["gender"] = this.gender;
        data["address"] = this.address;
        data["employer"] = this.employer;
        data["email"] = this.email;
        data["city"] = this.city;
        data["state"] = this.state;
        return data;
    }
}

export interface IAccount {
    accountNumber?: number;
    balance?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    age?: number;
    gender?: string | undefined;
    address?: string | undefined;
    employer?: string | undefined;
    email?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
}

export class AccountDto implements IAccountDto {
    accountNumber?: number;
    name?: string | undefined;
    email?: string | undefined;
    balance?: number;
    age?: number;
    gender?: string | undefined;

    constructor(data?: IAccountDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountNumber = _data["accountNumber"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.balance = _data["balance"];
            this.age = _data["age"];
            this.gender = _data["gender"];
        }
    }

    static fromJS(data: any): AccountDto {
        data = typeof data === 'object' ? data : {};
        let result = new AccountDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountNumber"] = this.accountNumber;
        data["name"] = this.name;
        data["email"] = this.email;
        data["balance"] = this.balance;
        data["age"] = this.age;
        data["gender"] = this.gender;
        return data;
    }
}

export interface IAccountDto {
    accountNumber?: number;
    name?: string | undefined;
    email?: string | undefined;
    balance?: number;
    age?: number;
    gender?: string | undefined;
}

export class AccountDtoPaginationList implements IAccountDtoPaginationList {
    /** 目前頁面的編號 */
    currentPage?: number;
    /** 每個頁面的大小 */
    pageSize?: number;
    /** 頁面總數量 */
    readonly totalPages?: number;
    /** 項目的總數量 */
    readonly totalItems?: number;
    /** 目前分頁面上的項目 */
    items?: AccountDto[] | undefined;
    /** 是否有上一頁 */
    readonly hasPreviousPage?: boolean;
    /** 是否有下一頁 */
    readonly hasNextPage?: boolean;

    constructor(data?: IAccountDtoPaginationList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currentPage = _data["currentPage"];
            this.pageSize = _data["pageSize"];
            (<any>this).totalPages = _data["totalPages"];
            (<any>this).totalItems = _data["totalItems"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(AccountDto.fromJS(item));
            }
            (<any>this).hasPreviousPage = _data["hasPreviousPage"];
            (<any>this).hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): AccountDtoPaginationList {
        data = typeof data === 'object' ? data : {};
        let result = new AccountDtoPaginationList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentPage"] = this.currentPage;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["totalItems"] = this.totalItems;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IAccountDtoPaginationList {
    /** 目前頁面的編號 */
    currentPage?: number;
    /** 每個頁面的大小 */
    pageSize?: number;
    /** 頁面總數量 */
    totalPages?: number;
    /** 項目的總數量 */
    totalItems?: number;
    /** 目前分頁面上的項目 */
    items?: AccountDto[] | undefined;
    /** 是否有上一頁 */
    hasPreviousPage?: boolean;
    /** 是否有下一頁 */
    hasNextPage?: boolean;
}

export class AccountDtoPaginationListApiResponse implements IAccountDtoPaginationListApiResponse {
    message?: string | undefined;
    data?: AccountDtoPaginationList;

    constructor(data?: IAccountDtoPaginationListApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.data = _data["data"] ? AccountDtoPaginationList.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AccountDtoPaginationListApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AccountDtoPaginationListApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAccountDtoPaginationListApiResponse {
    message?: string | undefined;
    data?: AccountDtoPaginationList;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}